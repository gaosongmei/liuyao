(defun 更新 (l key val)
  (cons (cons key val)
	(remove (assoc key l) l)))
(defmacro 用函数更新 (l key func)
  `(let ((ne (assoc ,key ,l)))
     (cons (,func ne ) (remove ne ,l))))

(defvar 六个爻 '("初爻" "二爻" "三爻" "四爻" "五爻" "上爻"))

(defvar 老阳 "老阳 ———  ->  —  —")
(defvar 老阴 "老阴 —  —  ->  ———")
(defvar 少阳 "少阳 ———      ———")
(defvar 少阴 "少阴 —  —      —  —")

(defvar 地支五行
  '(
    ("子" . "水")
    ("丑" . "土")
    ("寅" . "木")
    ("卯" . "木")
    ("辰" . "土")
    ("巳" . "火")
    ("午" . "火")
    ("未" . "土")
    ("申" . "金")
    ("酉" . "金")
    ("戌" . "土")
    ("亥" . "水")
    ))

(defvar 八卦纳甲
  '(
    ("乾" . ("甲子" "甲寅" "甲辰" "壬午" "壬申" "午戌"))
    ("坤" . ("乙未" "乙巳" "乙卯" "癸丑" "癸亥" "癸酉"))
    ("震" . ("庚子" "庚寅" "庚辰" "庚午" "庚申" "庚戌"))
    ("巽" . ("辛丑" "辛亥" "辛酉" "辛未" "辛巳" "辛卯"))
    ("坎" . ("戊寅" "戊辰" "戊午" "戊申" "戊戌" "戊子"))
    ("离" . ("己卯" "己丑" "己亥" "己酉" "己未" "己巳"))
    ("艮" . ("丙辰" "丙午" "丙申" "丙戌" "丙子" "丙寅"))
    ("兑" . ("丁巳" "丁卯" "丁丑" "丁亥" "丁酉" "丁未"))
    ))

(defun 纳甲地支取五行 (干支)
  (assoc (substring 干支 1) 地支五行))

(defvar 八卦
  `(
    ("乾" . ,(make-list 3 '少阳))
    ("坤" . ,(make-list 3 '少阴))
    ("艮" . (阴爻 阴爻 阳爻))
    ("兑" . (阳爻 阳爻 阴爻))
    ("坎" . (阴爻 阳爻 阴爻))
    ("离" . (阳爻 阴爻 阳爻))
    ("震" . (阳爻 阴爻 阴爻))
    ("巽" . (阴爻 阳爻 阳爻))
    ))

(defvar 八纯卦
  `(
    ("乾" . ,(make-list 6 '少阳))
    ("坤" . ,(make-list 6 '少阴))
    ("艮" . (阴爻 阴爻 阳爻 阴爻 阴爻 阳爻))
    ("兑" . (阳爻 阳爻 阴爻 阳爻 阳爻 阴爻))
    ("坎" . (阴爻 阳爻 阴爻 阴爻 阳爻 阴爻))
    ("离" . (阳爻 阴爻 阳爻 阳爻 阴爻 阳爻))
    ("震" . (阳爻 阴爻 阴爻 阳爻 阴爻 阴爻))
    ("巽" . (阴爻 阳爻 阳爻 阴爻 阳爻 阳爻))
    ))

(defun merge-alists (a1 a2)
   (let ((ret '())
	 (ac (copy-alist a1)))
      (dolist (x a2)
	(add-to-list 'ret (cons (pop ac) x)))
      (reverse ret)))

(defun 数卦爻 (要装的卦)
  (let ((ret '()))
    (dolist (每一卦 要装的卦)
      (add-to-list 'ret (merge-alists 六个爻 (cdr 每一卦))))
    (add-to-list 'ret '(1 23))
    ret))

(defvar 八卦对应五行
  '(
    ("乾" . "金")
    ("兑" . "金")
    ("离" . "火")
    ("震" . "木")
    ("巽" . "木")
    ("坎" . "水")
    ("艮" . "土")
    ("坤" . "土")
    ))

(defvar 五行相生
  '(
    ("水" . "木")
    ("木" . "火")
    ("火" . "土")
    ("土" . "金")
    ("金" . "水")
    ))

(defvar 五行相克
  '(
    ("水" . "火")
    ("木" . "土")
    ("火" . "金")
    ("土" . "水")
    ("金" . "木")
    ))

(defvar 四相 '((1 . 少阳) (2 . 少阴)(3 . 老阳) (0 . 老阴)))

(defvar 卦)

(defun 装卦 ()
  (setq 卦 nil)
  (dolist (n 六个爻)
    (setq 卦 (cons (cons n (cdr (assoc (random 4) 四相)))
		   卦))))

(defun 新buffer显示卦 ()
  (with-current-buffer
      (switch-to-buffer "新卦")
    (dolist (每爻 卦)
      (insert (concat (symbol-value (cdr 每爻)))
	      "\n"))))

(defun 定世应 (卦象)
  (cond
   ((and (not (eq (car 卦象) (nth 4 卦象)))
	 (eq (nth 2 卦象)
	     (nth 5 卦象))
	 (eq (nth 3 卦象)
	     (nth 6 卦象)))
    '(("初爻" . 世) ("四爻" . 应)))
   ((and (not (eq (car 卦象) (nth 4 卦象)))
	 (not (eq (nth 2 卦象)
		  (nth 5 卦象)))
	 (eq (nth 3 卦象)
	     (nth 6 卦象)))
    '(("二爻" . 世) ("五爻" . 应)))
   ((and (not (eq (car 卦象) (nth 4 卦象)))
	 (not (eq (nth 2 卦象)
		  (nth 5 卦象)))
	 (not (eq (nth 3 卦象)
		  (nth 6 卦象))))
    '(("三爻" . 世) ("上爻" . 应)))
   ((and (eq (car 卦象) (nth 4 卦象))
	 (not (eq (nth 2 卦象)
		  (nth 5 卦象)))
	 (not (eq (nth 3 卦象)
		  (nth 6 卦象))))
    '(("四爻" . 世) ("初爻" . 应)))
   ((and (eq (car 卦象) (nth 4 卦象))
	 (eq (nth 2 卦象)
	     (nth 5 卦象))
	 (not (eq (nth 3 卦象)
		  (nth 6 卦象))))
    '(("五爻" . 世) ("二爻" . 应)))
   ((and (not (eq (car 卦象) (nth 4 卦象)))
	 (eq (nth 2 卦象)
	     (nth 5 卦象))
	 (not (eq (nth 3 卦象)
		  (nth 6 卦象))))
    '(("四爻" . 世) ("初爻" . 应))
    ((and (eq (car 卦象) (nth 4 卦象))
	  (not (eq (nth 2 卦象)
		   (nth 5 卦象)))
	  (eq (nth 3 卦象)
	      (nth 6 卦象)))
     '(("三爻" . 世) ("上爻" . 应)))
    ((and (eq (car 卦象) (nth 4 卦象))
	  (eq (nth 2 卦象)
	      (nth 5 卦象))
	  (eq (nth 3 卦象)
	      (nth 6 卦象)))
     '(("上爻" . 世) ("三爻" . 应))))))

(defun 爻是阴还是阳 (爻)
  (cond	((and (stringp 爻) (string= 爻 "阴爻")) 爻)
	((and (stringp 爻) (string= 爻 "阳爻")) 爻)
	((or (equal 爻 老阴) (equal 爻 少阴)) "阴爻")
	((or (equal 爻 老阳) (equal 爻 少阳)) "阳爻")
	((and (symbolp 爻) (string= (symbol-name 爻) "老阴")) "阴爻")
	((and (symbolp 爻) (string= (symbol-name 爻) "少阴")) "阴爻")
	((and (symbolp 爻) (string= (symbol-name 爻) "老阳")) "阳爻")
	((and (symbolp 爻) (string= (symbol-name 爻) "少阳")) "阳爻")))

(defun 内卦 (卦象)
  (list (cons "初爻" (cdr (assoc "初爻" 卦象)))
	(cons "二爻" (cdr (assoc "二爻" 卦象)))
	(cons "三爻" (cdr (assoc "三爻" 卦象)))))

(defun 外卦 (卦象)
  (list (cons "初爻" (cdr (assoc "四爻" 卦象)))
	(cons "二爻" (cdr (assoc "五爻" 卦象)))
	(cons "三爻" (cdr (assoc "上爻" 卦象)))))

(defun 变爻 (爻)
  (cond ((equal "阴爻" (爻是阴还是阳 (cdr 爻))) "阳爻")
	((equal "阳爻" (爻是阴还是阳 (cdr 爻))) "阴爻")
	(t "error")))

(defun 找本宫卦 (卦象)
  (setq ret "none")
  (dolist (卦爻 '(nil
		  ("初爻")
		  ("二爻")
		  ("三爻")
		  ("四爻")
		  ("五爻")
		  ("四爻")
		  ("三爻" "二爻" "初爻")))
    (dolist (e 卦爻)
      (setq 卦象 (用函数更新 卦象 e
			     (lambda (element)
			       (cons (car element) (变爻 element))))))
    (if (equal (内卦 卦象) (外卦 卦象))
	(setq ret 卦象)
      ))
  ret)

(defun 简单 (卦象) (mapcar (lambda (爻位) (cons (car 爻位) (爻是阴还是阳 (symbol-value (cdr 爻位))))) 卦象))

(defun 起卦 ()
  (interactive)

  (装卦)
  (定世应 卦)
  (找本宫卦 (简单 卦))

  (新buffer显示卦))
